#!/usr/bin/env bash

#  http://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

set -o noclobber
set -e
set -o pipefail
set -o nounset
set -u
trap 'echo BOXBUILDER - boxbuilder: error on line $LINENO' ERR

setup() {
  if [ -e $HOME/.boxbuilderrc ]; then
    source $HOME/.boxbuilderrc
  fi
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder=boxbuilder_config_placeholder_from_boxbuilder'}
  eval $boxbuilder_config
  # TODO: specify exact package versions
  boxbuilder_prerequisite_packages=${boxbuilder_prerequisite_packages:-"build-essential zlib1g zlib1g-dev libssl-dev openssl libreadline5-dev bison libxml2-dev git-core autoconf curl"}
  boxbuilder_rvm_version=${boxbuilder_rvm_version:-$(curl -s http://rvm.beginrescueend.com/releases/stable-version.txt)}
  boxbuilder_default_ruby=${boxbuilder_default:-"1.8.7-p174"}
  boxbuilder_chef_repos=${boxbuilder_chef_repos:?"Please set 'boxbuilder_chef_repos' to a space-delimited list of Chef Git repositories"}
  boxbuilder_chef_dir=${boxbuilder_chef_dir:-"$HOME/.chef"}
  boxbuilder_chef_config_path=${boxbuilder_chef_config_path:?"Please set 'boxbuilder_chef_config_path' to the path of the Chef config file"}
  boxbuilder_chef_json_path=${boxbuilder_chef_json_path:?"Please set 'boxbuilder_chef_json_path' to the path of the Chef JSON attributes file"}
  boxbuilder_chef_gem_install_options=${boxbuilder_chef_gem_install_options:-"--no-ri --no-rdoc"}
  
  echo "BOXBUILDER - boxbuilder:  Environment variables:"
  echo "boxbuilder_config                    = $boxbuilder_config"
  echo "boxbuilder_prerequisite_packages     = $boxbuilder_prerequisite_packages"
  echo "boxbuilder_rvm_version               = $boxbuilder_rvm_version"
  echo "boxbuilder_default_ruby              = $boxbuilder_default_ruby"
  echo "boxbuilder_chef_repos                = $boxbuilder_chef_repos"
  echo "boxbuilder_chef_dir                  = $boxbuilder_chef_dir"
  echo "boxbuilder_chef_config_path          = $boxbuilder_chef_config_path"
  echo "boxbuilder_chef_json_path            = $boxbuilder_chef_json_path"
  echo "boxbuilder_chef_gem_install_options  = $boxbuilder_chef_gem_install_options"
  
}

setup_boxbuilderrc() {
  echo "BOXBUILDER - boxbuilder:  Setting up $HOME/.boxbuilderrc and $HOME/.boxbuilderrc_download ..."

  boxbuilderrc_url=${boxbuilderrc_url:-"http://github.com/thewoolleyman/boxbuilder/raw/master/boxbuilderrc_download_default"}

  echo "BOXBUILDER - boxbuilder:  Creating $HOME/.boxbuilderrc to call $HOME/.boxbuilderrc_download ..."
  if [ -e $HOME/.boxbuilderrc  ]; then
    echo "BOXBUILDER - boxbuilder: $HOME/.boxbuilderrc already exists.  Not overwriting..."
    # TODO: check if line to source $HOME/.boxbuilderrc_download exists, add if it doesn't
  else
    echo "BOXBUILDER - boxbuilder: Creating $HOME/.boxbuilderrc which will source $HOME/.boxbuilderrc_download ..."
    echo "source $HOME/.boxbuilderrc_download" > $HOME/.boxbuilderrc
  fi
    
  echo "BOXBUILDER - boxbuilder:  Downloading AND overwriting $HOME/.boxbuilderrc_download from $boxbuilderrc_url ..."
  wget -O $HOME/.boxbuilderrc_download $boxbuilderrc_url
  echo "# WARNING: This file was automatically downloaded from $boxbuilderrc_url - it will be overwritten the next time boxbuilder runs.  Put any local overrides at the bottom of $HOME/.boxbuilderrc, which is created by default to source this file." >> $HOME/.boxbuilderrc_download
  
  echo "BOXBUILDER - boxbuilder:  Finished setting up $HOME/.boxbuilderrc and $HOME/.boxbuilderrc_download ..."
}

install_packages() {
  echo "BOXBUILDER - boxbuilder:  Installing packages..."
  export DEBIAN_FRONTEND=noninteractive  # Make Debian never prompt for user input on packages ...
  _packages_missing=false
  for _package in $boxbuilder_prerequisite_packages
  do
    _package_name=${_package%=*}
    if [[ -z $(echo $_package | grep '=') ]]; then
      _package_version=''
    else
      _package_version=${_package#*=}
    fi
    set +e
    _package_status=$(dpkg -l $_package_name | grep "ii  $_package_name" | grep "$_package_version")
    set -e
    if [[ -z $_package_status ]]; then
      echo "BOXBUILDER - boxbuilder:  Package $_package is NOT already installed..."
      _packages_missing=true
    else
      echo "BOXBUILDER - boxbuilder:  Package $_package is already installed..."
    fi
  done
  if [[ $_packages_missing = true ]]; then
    echo "BOXBUILDER - boxbuilder:  Updating Aptitude..."
    sudo apt-get update
    echo "BOXBUILDER - boxbuilder:  Installing prerequisite packages for RVM/Ruby..."
    for _package in $boxbuilder_prerequisite_packages
    do
      echo "BOXBUILDER - boxbuilder:  Installing package: $_package"
      sudo apt-get install -y $_package
    done
    echo "BOXBUILDER - boxbuilder:  Finished installing packages..."
  else
    echo "BOXBUILDER - boxbuilder:  All packages are already installed, not updating Aptitude or installing packages ..."
  fi
}

install_rvm() {
  echo "BOXBUILDER - boxbuilder:  Installing RVM version $boxbuilder_rvm_version ..."
  echo "BOXBUILDER - boxbuilder:  Reloading default RVM interpreter in this shell, if it is installed"
  if [[ -s $HOME/.rvm/environments/default ]]; then
    source $HOME/.rvm/environments/default
  fi
  if [[ -s $HOME/.rvm/scripts/rvm && ! -z $($HOME/.rvm/bin/rvm --version | grep $boxbuilder_rvm_version) ]]; then
    echo "BOXBUILDER - boxbuilder:  Not reinstalling RVM version $boxbuilder_rvm_version because it is already installed ..."
  else
    mkdir -p $HOME/.rvm/src/
    rm -rf $HOME/.rvm/src/rvm/
    git clone --depth 1 git://github.com/wayneeseguin/rvm.git $HOME/.rvm/src/rvm
    $HOME/.rvm/src/rvm/install
    echo "BOXBUILDER - boxbuilder:  Finished installing RVM version $boxbuilder_rvm_version ..."
  fi
}

enable_rvm() {
  echo "BOXBUILDER - boxbuilder:  Enabling RVM in init file $init_file"
  rvm_init="if [[ -s $HOME/.rvm/scripts/rvm ]] ; then source $HOME/.rvm/scripts/rvm ; fi"
  if [[ -z $(grep '.rvm' $init_file) ]] ; then
    echo $rvm_init >> $init_file
    echo "BOXBUILDER - boxbuilder:  Added RVM line to $init_file"
  else
    echo "BOXBUILDER - boxbuilder:  Not adding RVM line to $init_file because it already exists ..."
  fi
  if [[ ! -z $(grep -e '.*&& return.*$' $init_file) ]] ; then
    # mount proc to avoid error message from sed: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=559539
    # sudo mount -t proc none /proc/  # comment for now, fails if proc already mounted
    sed -i'.bak' -e 's/^.*&& return.*$//' $init_file
    echo "BOXBUILDER - boxbuilder:  Removed '&& return' from $init_file"
  else
    echo "BOXBUILDER - boxbuilder:  Not removing '&& return' from $init_file because it was not found ..."
  fi
  echo "BOXBUILDER - boxbuilder:  Finished enabling RVM in init file $init_file"
}

install_rvm_ruby() {
  echo "BOXBUILDER - boxbuilder:  Installing RVM default ruby: $boxbuilder_default_ruby"
  set +u
  set +e
  if [[ -z $($HOME/.rvm/bin/rvm info | head -n 1 | grep $boxbuilder_default_ruby) ]] ; then
    $HOME/.rvm/bin/rvm install $boxbuilder_default_ruby
    echo "BOXBUILDER - boxbuilder:  Finished installing RVM default ruby: $boxbuilder_default_ruby"
  else
    echo "BOXBUILDER - boxbuilder:  Not installing RVM Ruby $boxbuilder_default_ruby because it is already installed ..."
  fi
  set -u
  set -e
}

set_rvm_default_ruby() {
  echo "BOXBUILDER - boxbuilder:  Setting RVM default ruby: $boxbuilder_default_ruby"
  set +e
  $HOME/.rvm/bin/rvm --default use $boxbuilder_default_ruby
  set -e
  echo "BOXBUILDER - boxbuilder:  Finished setting RVM default ruby: $boxbuilder_default_ruby"
}

setup_rvm() {
  echo "BOXBUILDER - boxbuilder:  Setting up RVM..."
  install_rvm
  for init_file in $HOME/.bashrc $HOME/.bash_profile
  do
    if [[ -e $init_file ]] ; then
      set +e  # turn off return code checking for now, failing with output 'tput: unknown terminal "unknown"'
      enable_rvm
      set -e
    fi
  done
  install_rvm_ruby
  set_rvm_default_ruby
  echo "BOXBUILDER - boxbuilder:  Reloading default RVM interpreter in this shell"
  source $HOME/.rvm/environments/default
  echo "BOXBUILDER - boxbuilder:  Finished setting up RVM..."
}

install_chef() {
  echo "BOXBUILDER - boxbuilder:  Installing Chef..."
  # TODO: Allow override if user wants to force reinstall with different boxbuilder_chef_gem_install_options
  if [[ -z $(gem search ^chef$ | grep -e '^chef') ]]; then
    gem install chef $boxbuilder_chef_gem_install_options
    echo "BOXBUILDER - boxbuilder:  Finished installing Chef..."
  else
    echo "BOXBUILDER - boxbuilder:  'chef' gem is already installed, not reinstalling..."
  fi
}

download_chef_repos() {
  echo "BOXBUILDER - boxbuilder:  Downloading/updating Chef Repos..."
  if [ ! -e $boxbuilder_chef_dir ]; then
    mkdir -p $boxbuilder_chef_dir
  fi
  # TODO: handle branches, probably optionally comma delimited after repo URL
  for _boxbuilder_chef_repo in $boxbuilder_chef_repos
  do
    _name_dot_git=${_boxbuilder_chef_repo##*/}
    _repo_path="$boxbuilder_chef_dir/${_name_dot_git%.*}"
    if [ ! -e $_repo_path ]; then
      echo "BOXBUILDER - boxbuilder:  $_repo_path does not exist, cloning from $_boxbuilder_chef_repo ..."
      git clone --recursive -- $_boxbuilder_chef_repo $_repo_path
    else
      echo "BOXBUILDER - boxbuilder:  $_repo_path already exists, pulling and updating ..."
      echo $_repo_path
      set +u
      cd $_repo_path
      set -u
      git pull
      git submodule update --init
      set +u
      cd -
      set -u
    fi
  done
  echo "BOXBUILDER - boxbuilder:  Finished downloading/updating Chef Repos..."
}

create_chef_script() {
  echo "BOXBUILDER - boxbuilder:  Creating Chef script..."
  # TODO: ...
  echo "BOXBUILDER - boxbuilder:  Finished Creating Chef Script..."
}

run_chef() {
  echo "BOXBUILDER - boxbuilder:  Running Chef Solo command: rvmsudo chef-solo -c $boxbuilder_chef_config_path -j $boxbuilder_chef_json_path"
  rvmsudo chef-solo -c $boxbuilder_chef_config_path -j $boxbuilder_chef_json_path
  echo "BOXBUILDER - boxbuilder:  Finished running Chef Solo command:  rvmsudo chef-solo -c $boxbuilder_chef_config_path -j $boxbuilder_chef_json_path"
}

run() {
  echo "BOXBUILDER - boxbuilder: Starting ..."
  setup_boxbuilderrc
  setup
  install_packages
  setup_boxbuilderrc
  setup_rvm
  install_chef
  download_chef_repos
  create_chef_script
  run_chef
  echo "BOXBUILDER - boxbuilder: Finished!"
}

run