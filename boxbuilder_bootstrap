#!/usr/bin/env bash

#  http://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false}

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set â€“o verbose
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

setup() {
  echo "$_log_prefix  Environment variable setup ..."
  if [ -e $HOME/.boxbuilderrc ]; then
    source $HOME/.boxbuilderrc
  fi
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_bootstrap=boxbuilder_config_placeholder_from_boxbuilder_bootstrap'}
  eval $boxbuilder_config
  boxbuilder_user=$USER
  boxbuilder_host=$HOSTNAME
  boxbuilder_repo=${boxbuilder_repo:-"git://github.com/thewoolleyman/boxbuilder.git"}
  boxbuilder_branch=${boxbuilder_branch:-"master"}
  boxbuilder_remote=${boxbuilder_remote:-"origin"}
  boxbuilder_dir=${boxbuilder_dir:-"$HOME/.boxbuilder/"}

  echo "$_log_prefix  Finished environment variable setup:"
  echo "boxbuilder_config=$boxbuilder_config"
  # TODO: Add all env vars which are directly used by this script
}

grant_nopasswd_sudo_access() {
  echo "BOXBUILDER: Checking 'admin' group membership for user $boxbuilder_user on host $boxbuilder_host."
  if [[ $(groups | grep -q -e 'admin') ]]; then
    echo "$_log_prefix error on line $LINENO - user $boxbuilder_user is not a member of the 'admin' group on host $boxbuilder_host.  Please add..."
    return 1
  fi

  echo "$_log_prefix Checking no-password sudo access for 'admin' group on host $boxbuilder_host and adding if necessary.  If prompted, please type your password, or ctrl-c to abort..."
  if [[ ! $(sudo grep -e "%admin.*ALL.*=.*NOPASSWD.*:.*ALL" /etc/sudoers) ]]; then
    echo "$_log_prefix Giving user $boxbuilder_user NO PASSWORD sudo privileges"
    sudo rm -f /tmp/sudoers.new
    sudo cp /etc/sudoers /etc/sudoers.bak
    sudo cp /etc/sudoers /tmp/sudoers.new
    new_sudoers_line="%admin ALL=NOPASSWD: ALL"
    sudo sh -c "echo \"$new_sudoers_line\" >> /tmp/sudoers.new"
    if [ ! -e /tmp/sudoers.new ]; then
      echo "$_log_prefix error on line $LINENO - Could not add create /tmp/sudoers.new on host $boxbuilder_host.  Please manually add this entry using visudo: $new_sudoers_line"
      return 1
    fi
    enable_error_checking
    sudo visudo -c -s -f /tmp/sudoers.new
    disable_error_checking
    if [ ! $? = 0 ]; then
      echo "$_log_prefix error on line $LINENO -: Syntax error in /tmp/sudoers.new on host $boxbuilder_host.  Please manually add this entry using visudo: $new_sudoers_line"
      return 1
    fi
    sudo cp /tmp/sudoers.new /etc/sudoers
  else
    echo "$_log_prefix admin group already appears to have NOPASSWD sudo access."
  fi  
}

install_git() {
  echo "$_log_prefix Installing git"
  sudo apt-get install -y git-core
}

check_out_boxbuilder() {
  if [ -d $boxbuilder_dir ]; then
    echo "$_log_prefix Directory $boxbuilder_dir already exists.  Not cloning or overwriting..."
    echo "$_log_prefix Pulling latest $boxbuilder_remote/$boxbuilder_branch into existing $boxbuilder_dir"
    echo "cd $boxbuilder_dir && git pull $boxbuilder_remote $boxbuilder_branch"
    cd $boxbuilder_dir && git pull $boxbuilder_remote $boxbuilder_branch
  else
    echo "$_log_prefix Cloning $boxbuilder_branch branch from $boxbuilder_repo to directory $boxbuilder_dir ..."
    echo "$_log_prefix git clone -b $boxbuilder_branch $boxbuilder_repo $boxbuilder_dir"
    git clone -b $boxbuilder_branch $boxbuilder_repo $boxbuilder_dir
  fi
}

run_boxbuilder() {
  boxbuilder_script="$boxbuilder_dir"boxbuilder
  if [ ! -x $boxbuilder_script ]; then
    echo "$_log_prefix error on line $LINENO - No executable script found at $boxbuilder_script"
    return 1
  else
    echo "$_log_prefix Running boxbuilder script at $boxbuilder_script ..."
    source $boxbuilder_script
  fi
}

run() {
  echo "$_log_prefix Starting ..."
  setup
  grant_nopasswd_sudo_access
  install_git
  check_out_boxbuilder
  run_boxbuilder
  echo "$_log_prefix Finished and exiting successfully"
}

run
onexit
