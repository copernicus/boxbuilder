#!/usr/bin/env bash

#  http://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

set -o noclobber
set -e
set -o errexit
set -o pipefail
set -o nounset
set -u
trap 'echo BOXBUILDER - boxbuilder_build_ami: error on line $LINENO' ERR EXIT INT TERM

setup() {
  echo "BOXBUILDER - boxbuilder_build_ami:  Environment variable setup ..."
  if [ -e $HOME/.boxbuilderrc ]; then
    source $HOME/.boxbuilderrc
  fi
  
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_build_ami=boxbuilder_config_placeholder_from_boxbuilder'}
  eval $boxbuilder_config
  boxbuilder_bootstrap_url=${boxbuilder_bootstrap_url:-"http://github.com/thewoolleyman/boxbuilder/raw/master/boxbuilder_bootstrap"}

  boxbuilder_ami_prefix=${boxbuilder_ami_prefix:-"built-by-boxbuilder"}
  
  EC2_CERT=${EC2_CERT:-""}
  EC2_PRIVATE_KEY=${EC2_PRIVATE_KEY:-""}
  
  _codename=lucid
  _release=10.04
  _tag=server

  # TODO: Make sure these kernel and ramdisk values are correct for lucid
  if [[ $(uname -m) = "x86_64" ]] ; then
    _arch=x86_64
    _arch2=amd64
    _ebsopts="--kernel=aki-0b4aa462 --ramdisk=ari-c515f6ac --block-device-mapping /dev/sdb=ephemeral0"
  else
    _arch=i386
    _arch2=i386
    _ebsopts="--kernel=aki-754aa41c --ramdisk=ari-0915f660  --block-device-mapping /dev/sda2=ephemeral0"
  fi

  _imagesource=http://uec-images.ubuntu.com/releases/$_codename/release/unpacked/ubuntu-$_release-$_tag-uec-$_arch2.img.tar.gz
  _image=/mnt/$_codename-$_tag-uec-$_arch2.img
  _imagedir=/mnt/$_codename-uec-$_arch2

  echo "BOXBUILDER - boxbuilder_build_ami:  Finished environment variable setup:"
  echo "boxbuilder_config=$boxbuilder_config"
  # TODO: Add all env vars which are directly used by this script
}

set_ec2_credentials() {
  echo "BOXBUILDER - boxbuilder_build_ami: Setting EC2 credentials ..."
  
  if [[ -z $EC2_CERT ]]; then
    EC2_CERT=( $HOME/.ec2/cert-*.pem ) # grab first file using bash array
    echo "BOXBUILDER - boxbuilder_remote_build_ami: EC2_CERT is not set, loading from $HOME/.ec2/cert-*.pem ..."
  fi

  if [[ ! -e $EC2_CERT ]]; then
    echo "BOXBUILDER - boxbuilder_build_ami: ERROR: EC2_CERT was not found at $EC2_CERT, exiting ..."
    return 1
  fi

  if [[ -z $EC2_PRIVATE_KEY ]]; then
    EC2_PRIVATE_KEY=( $HOME/.ec2/pk-*.pem ) # grab first file using bash array
    echo "BOXBUILDER - boxbuilder_remote_build_ami: EC2_PRIVATE_KEY is not set, loading from $HOME/.ec2/pk-*.pem ..."
  fi

  if [[ ! -e $EC2_PRIVATE_KEY ]]; then
    echo "BOXBUILDER - boxbuilder_build_ami: ERROR: EC2_PRIVATE_KEY was not found at $EC2_PRIVATE_KEY, exiting ..."
    return 1
  fi

  export EC2_CERT
  export EC2_PRIVATE_KEY

  echo "BOXBUILDER - boxbuilder_build_ami: Finished setting EC2 credentials.  Using EC2_CERT=$EC2_CERT and EC2_PRIVATE_KEY=$EC2_PRIVATE_KEY ..."
}

install_ec2_tools() {
  echo "BOXBUILDER - boxbuilder_build_ami: Installing ec2 tools ..."
  echo "BOXBUILDER - boxbuilder_build_ami: Ensuring that multiverse is added to /etc/apt/sources.list so ec2 packages can be installed ..."
  sudo sed -i".bak-$(date +%Y%m%d-%H%M)" -e 's/universe$/universe multiverse/' /etc/apt/sources.list
  echo "BOXBUILDER - boxbuilder_build_ami: Updating apt and installing EC2 tools ..."
  sudo apt-get update
  # sudo -E apt-get dist-upgrade -y    # TODO: Why do we need this?  Left over from ESH's original AMI builder article.  Delete if unnecessary
  sudo -E apt-get install -y ec2-api-tools ec2-ami-tools
  echo "BOXBUILDER - boxbuilder_build_ami: Finished installing ec2 tools ..."
}

create_chroot_jail_from_base_image() {
  echo "BOXBUILDER - boxbuilder_build_ami: Creating chroot jail from base image $_imagesource ..."
  if [[ -e $_image ]]; then
    echo "BOXBUILDER - boxbuilder_build_ami: Unzipped image $_image already exists.  Not downloading again ..."
  else
    echo "BOXBUILDER - boxbuilder_build_ami: Downloading image and unzipping to $_image ..."
    wget --progress=dot:mega -O- $_imagesource | sudo tar xzf - -C /mnt
  fi
  sudo mkdir -p $_imagedir

  echo "BOXBUILDER - boxbuilder_build_ami: Resizing $_image to 5G ..."
  # Resize image so we have enough space to install in chroot
  # Not sure if one or both of uec-resize-image and resize2fs are needed
  sudo uec-resize-image $_image 5G

  echo "BOXBUILDER - boxbuilder_build_ami: Ensuring existing loop device at /dev/loop4 is unmounted ..."
  # Ensure existing loop device is unmounted (allows script to be run multiple times)
  if [[ ! -z $(mount | grep '/dev/loop4') ]]; then
    sudo umount -dfl /dev/loop4
  fi 

  echo "BOXBUILDER - boxbuilder_build_ami: Mounting loop device at /dev/loop4 ..."
  sudo mount -o loop=/dev/loop4 $_image $_imagedir

  echo "BOXBUILDER - boxbuilder_build_ami: Resizing loop device at /dev/loop4 to 5G ..."
  # Sometimes this is needed even though image was resized before mount with uec-resize-image?
  sudo resize2fs /dev/loop4 5G

  echo "BOXBUILDER - boxbuilder_build_ami: Performing initial setup on chroot jail at $_imagedir ..."
  # Allow network access from chroot environment
  sudo cp /etc/resolv.conf $_imagedir/etc/
  # Remove hostname
  sudo rm -f $_imagedir/etc/hostname
  sudo chroot $_imagedir su - ubuntu -c "touch /home/ubuntu/.bash_history"
  sudo chroot $_imagedir apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BE09C571
  sudo chroot $_imagedir mount -t proc none /proc
  sudo chroot $_imagedir mount -t devpts none /dev/pts
  echo "BOXBUILDER - boxbuilder_build_ami: Finished creating chroot jail from base image $_imagesource ..."
}

run_boxbuilder_bootstrap_in_chroot_jail_to_build_image() {
  echo "BOXBUILDER - boxbuilder_build_ami: Running boxbuilder_bootstrap in chroot jail to build image ..."
  echo "BOXBUILDER - boxbuilder_build_ami: Performing custom setup in $_imagedir using script at $boxbuilder_bootstrap_url ..."
  _boxbuilder_bootstrap_script=/tmp/${boxbuilder_bootstrap_url##*/} # grabs last path component of url to use as script name
  echo "BOXBUILDER - boxbuilder_build_ami: Downloading $_boxbuilder_bootstrap_script from $boxbuilder_bootstrap_url ..."
  sudo chroot $_imagedir wget -O $_boxbuilder_bootstrap_script $boxbuilder_bootstrap_url
  echo "BOXBUILDER - boxbuilder_build_ami: $boxbuilder_bootstrap_url successfully downloaded to $_boxbuilder_bootstrap_script ..."

  echo "BOXBUILDER - boxbuilder_build_ami: Changing permissions on $_boxbuilder_bootstrap_script ..."
  sudo chroot $_imagedir chmod a+x $_boxbuilder_bootstrap_script
  echo "BOXBUILDER - boxbuilder_build_ami: Running $_boxbuilder_bootstrap_script ..."
  # TODO: does this pass everything in environment and $boxbuilder_config, or do we need to do more?
  sudo chroot $_imagedir sudo -u ubuntu -i bash -c "$boxbuilder_config && $_boxbuilder_bootstrap_script"
  echo "BOXBUILDER - boxbuilder_build_ami: Finished running boxbuilder_bootstrap in chroot jail to build image ..."
}

copy_image_to_ami() {
  echo "BOXBUILDER - boxbuilder_build_ami: Copying image to AMI ..."
  echo "BOXBUILDER - boxbuilder_build_ami: Cleaning up mounts and policy-rc.d in chroot jail before copying image ..."
  if [[ ! -z $(sudo chroot $_imagedir mount | grep '/proc') ]]; then
    sudo chroot $_imagedir umount /proc
  fi
  if [[ ! -z $(sudo chroot $_imagedir mount | grep '/dev/pts') ]]; then
    sudo chroot $_imagedir umount /dev/pts
  fi
  sudo rm -f $_imagedir/usr/sbin/policy-rc.d
  
  _size=15 # root disk in GB
  _now=$(date +%Y%m%d-%H%M)
  _prefix="$boxbuilder_ami_prefix-ubuntu-$_release-$_codename-$_tag-$_arch-$_now"
  _description="Ubuntu $_release $_codename $_tag $_arch $_now"

  echo "BOXBUILDER - boxbuilder_build_ami: Ensuring no existing volume is already attached at /dev/sdi ..."
  # TODO: Why must -K and -C be passed?  Why can't it find exported vars in subshell?
  # TODO: and why do we need set +e?
  set +e
  _existing_volumeid=$(ec2-describe-volumes -K $EC2_PRIVATE_KEY -C $EC2_CERT | grep -e '^ATTACHMENT.*/dev/sdi' | cut -f2)
  set -e
  if [[ ! -z $_existing_volumeid ]]; then
    echo "BOXBUILDER - boxbuilder_build_ami: Volume $_existing_volumeid is already attached at /dev/sdi.  Detaching and deleting ..."
    ec2-detach-volume -f $_existing_volumeid
    ec2-delete-volume $_existing_volumeid
  fi
  echo "BOXBUILDER - boxbuilder_build_ami: Ensuring nothing is mounted at /dev/sdi ..."
  if [[ ! -z $(sudo mount | grep '/dev/sdi') ]]; then
    echo "BOXBUILDER - boxbuilder_build_ami: /dev/sdi is already mounted.  Unmounting ..."
    sudo umount /dev/sdi
  fi
  
  echo "BOXBUILDER - boxbuilder_build_ami: Creating new volume ..."
  # TODO: Why must -K and -C be passed?  Why can't it find exported vars in subshell?
  _volumeid=$(ec2-create-volume -K $EC2_PRIVATE_KEY -C $EC2_CERT --size $_size --availability-zone us-east-1a | cut -f2)
  
  echo "BOXBUILDER - boxbuilder_build_ami: Retrieving current instance id ..."
  _instance_id=$(wget --progress=dot -qO- http://instance-data/latest/meta-data/instance-id)
  
  echo "BOXBUILDER - boxbuilder_build_ami: Attaching new volume $_volumeid to current instance $_instance_id at device /dev/sdi ..."
  # TODO: Why must -K and -C be passed?  Why can't it find exported vars in THIS shell?
  ec2-attach-volume -K $EC2_PRIVATE_KEY -C $EC2_CERT --device /dev/sdi --instance "$_instance_id" "$_volumeid"
  while [ ! -e /dev/sdi ]; do echo -n .; sleep 1; done
  
  echo "BOXBUILDER - boxbuilder_build_ami: Creating filesystem on /dev/sdi ..."
  sudo mkfs.ext3 -F /dev/sdi
  _imagedir_ebs=$_imagedir-ebs
  
  echo "BOXBUILDER - boxbuilder_build_ami: Mounting device /dev/sdi mounted at $_imagedir_ebs ..."
  sudo rm -rf $_imagedir_ebs
  sudo mkdir -p $_imagedir_ebs
  sudo mount /dev/sdi $_imagedir_ebs
  echo "BOXBUILDER - boxbuilder_build_ami: Copying built image from chroot jail at $_imagedir to EBS volume $_volumeid attached to device /dev/sdi mounted at $_imagedir_ebs ..."
  sudo tar -cSf - -C $_imagedir . | sudo tar xf - -C $_imagedir_ebs

  echo "BOXBUILDER - boxbuilder_build_ami: Unmounting $_imagedir_ebs ..."
  sudo umount $_imagedir_ebs
  echo "BOXBUILDER - boxbuilder_build_ami: Detaching EC2 volume $_volumeid ..."
  ec2-detach-volume "$_volumeid"
  
  echo "BOXBUILDER - boxbuilder_build_ami: Creating snapshot of volume $_volumeid ..."
  _snapshotid=$(ec2-create-snapshot "$_volumeid" | cut -f2)
  ec2-delete-volume "$_volumeid"
  while ec2-describe-snapshots "$_snapshotid" | grep -q pending
    do echo -n .; sleep 1; done
  _ec2_register_output=$(ec2-register \
    --architecture $_arch \
    --name "$_prefix" \
    --description "$_description" \
    $_ebsopts \
    --snapshot "$_snapshotid")
  _newami=$(echo $_ec2_register_output | cut -f2)

  echo "BOXBUILDER - boxbuilder_build_ami: NEW AMI SUCCESSFULLY CREATED AND REGISTERED:"
  echo "BOXBUILDER - boxbuilder_build_ami: grep and following output lines and evaluate them to retrieve and set local variables describing the new AMI"
  echo "------------------------------------"
  echo "boxbuilder_created_ami_id='$_newami'"
  echo "boxbuilder_created_ami_ebs_id='$_volumeid'"
  echo "boxbuilder_created_ami_ebs_snapshot_id='$_snapshotid'"
  echo "boxbuilder_created_ami_prefix='$_prefix'"
  echo "boxbuilder_created_ami_description='$_description'"
  echo "------------------------------------"
  echo "BOXBUILDER - boxbuilder_build_ami: Finished copying image to AMI ..."
}

run() {
  echo "BOXBUILDER - boxbuilder_build_ami: Starting ..."
  setup
  set_ec2_credentials
  install_ec2_tools
  create_chroot_jail_from_base_image
  run_boxbuilder_bootstrap_in_chroot_jail_to_build_image
  copy_image_to_ami
  echo "BOXBUILDER - boxbuilder_build_ami: Finished!"
}

run
