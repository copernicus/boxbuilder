#!/usr/bin/env bash

#  http://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

set -o noclobber
set -e
set -o pipefail
set -o nounset
set -u
trap 'echo BOXBUILDER - boxbuilder_build_ami: error on line $LINENO' ERR

setup() {
  if [ -e $HOME/.boxbuilderrc ]; then
    source $HOME/.boxbuilderrc
  fi
  
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_build_ami=boxbuilder_config_placeholder_from_boxbuilder'}
  eval $boxbuilder_config
  boxbuilder_bootstrap_url=${boxbuilder_bootstrap_url:-"http://github.com/thewoolleyman/boxbuilder/raw/master/boxbuilder_bootstrap"}

  # AMI Builder Settings
  boxbuilder_ami_instancetype=${boxbuilder_ami_instancetype:?"Please set 'boxbuilder_ami_instancetype' to the type of instance you want, e.g. m1.small for 32 bit and m1.large for 64 bit (See http://aws.amazon.com/ec2/instance-types/)"}
  boxbuilder_ami_prefix=${boxbuilder_ami_prefix:?"Please set 'boxbuilder_ami_prefix' to a string with no spaces.  This string will be prepended to the name of your new AMI"}
  
  # Keypairname only used when starting instance, commented for use in boxbuilder_remote_build_ami
  # boxbuilder_ec2_keypairname=${boxbuilder_ec2_keypairname:?"Please set "boxbuilder_ec2_keypairname" to the name of your keypair which matches $HOME/.ec2/keypair-ec2-boxbuilder.pem (https://console.aws.amazon.com/ec2/home#c=EC2&s=KeyPairs)"}
  
  _codename=lucid
  _release=10.04
  _tag=server

  # TODO: Make sure these kernel and ramdisk values are correct for lucid
  if [[ $(uname -m) = "x86_64" ]] ; then
    _arch=x86_64
    _arch2=amd64
    _ebsopts="--kernel=aki-0b4aa462 --ramdisk=ari-c515f6ac --block-device-mapping /dev/sdb=ephemeral0"
  else
    _arch=i386
    _arch2=i386
    _ebsopts="--kernel=aki-754aa41c --ramdisk=ari-0915f660  --block-device-mapping /dev/sda2=ephemeral0"
  fi

  _imagesource=http://uec-images.ubuntu.com/releases/$_codename/release/unpacked/ubuntu-$_release-$_tag-uec-$_arch2.img.tar.gz
  _image=/mnt/$_codename-$_tag-uec-$_arch2.img
  _imagedir=/mnt/$_codename-uec-$_arch2

  echo "BOXBUILDER - boxbuilder_build_ami:  Environment variables:"
  echo "boxbuilder_config                    = $boxbuilder_config"
}

install_ec2_tools() {
  echo "BOXBUILDER - boxbuilder_build_ami: Installing ec2 tools ..."
  sudo apt-get update
  sudo -E apt-get dist-upgrade -y
  sudo -E apt-get install -y ec2-api-tools ec2-ami-tools
  echo "BOXBUILDER - boxbuilder_build_ami: Finished installing ec2 tools ..."
}

create_chroot_jail_from_base_image() {
  echo "BOXBUILDER - boxbuilder_build_ami: Creating chroot jail from base image $_imagesource ..."
  if [[ -e $_image ]]; then
    echo "BOXBUILDER - boxbuilder_build_ami: Unzipped image $_image already exists.  Not downloading again ..."
  else
    echo "BOXBUILDER - boxbuilder_build_ami: Downloading image and unzipping to $_image ..."
    wget --progress=dot:mega -O- $_imagesource | sudo tar xzf - -C /mnt
  fi
  sudo mkdir -p $_imagedir
  # Resize image so we have enough space to install in chroot
  # Not sure if one or both of uec-resize-image and resize2fs are needed
  sudo uec-resize-image $_image 5G
  # Ensure existing loop device is unmounted (allows script to be run multiple times)
  sudo umount /dev/loop4
  sudo mount -o loop=/dev/loop4 $_image $_imagedir
  # Sometimes this is needed even though image was resized before mount with uec-resize-image?
  sudo resize2fs /dev/loop4 5G

  # Allow network access from chroot environment
  sudo cp /etc/resolv.conf $_imagedir/etc/
  # Remove hostname
  sudo rm -f $_imagedir/etc/hostname
  sudo chroot $_imagedir su - ubuntu -c "touch /home/ubuntu/.bash_history"
  sudo chroot $_imagedir apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BE09C571
  sudo chroot $_imagedir mount -t proc none /proc
  sudo chroot $_imagedir mount -t devpts none /dev/pts
  echo "BOXBUILDER - boxbuilder_build_ami: Finished creating chroot jail from base image $_imagesource ..."
}

run_boxbuilder_bootstrap_in_chroot_jail_to_build_image() {
  echo "BOXBUILDER - boxbuilder_build_ami: Running boxbuilder_bootstrap in chroot jail to build image ..."
  echo "BOXBUILDER - boxbuilder_build_ami: Performing custom setup on $_imagedir using script at $boxbuilder_bootstrap_url ..."
  _boxbuilder_bootstrap_script=/tmp/${boxbuilder_bootstrap_url##*/} # grabs last path component of url to use as script name
  echo "BOXBUILDER - boxbuilder_build_ami: Downloading custom setup script $_boxbuilder_bootstrap_script from $boxbuilder_bootstrap_url ..."
  wget -O $_boxbuilder_bootstrap_script $boxbuilder_bootstrap_url
  while exists=$(if [[ -e $_boxbuilder_bootstrap_script ]] ; then echo exists; fi); test "$exists" != "exists" ; do
    echo "BOXBUILDER - boxbuilder_build_ami: Waiting for curl to finish downloading $_boxbuilder_bootstrap_script from $boxbuilder_bootstrap_url ..."
    sleep 3
  done
  echo "BOXBUILDER - boxbuilder_build_ami: $boxbuilder_bootstrap_url successfully downloaded to $_boxbuilder_bootstrap_script ..."

  echo "BOXBUILDER - boxbuilder_build_ami: Changing permissions on $_boxbuilder_bootstrap_script ..."
  chmod a+x $_boxbuilder_bootstrap_script
  echo "BOXBUILDER - boxbuilder_build_ami: Running $_boxbuilder_bootstrap_script ..."
  $_boxbuilder_bootstrap_script
  echo "BOXBUILDER - boxbuilder_build_ami: Finished running boxbuilder_bootstrap in chroot jail to build image ..."
}

copy_image_to_ami() {
  echo "BOXBUILDER - boxbuilder_build_ami: Copying image to AMI ..."
  sudo chroot $_imagedir umount /proc
  sudo chroot $_imagedir umount /dev/pts
  sudo rm -f $_imagedir/usr/sbin/policy-rc.d
  _size=15 # root disk in GB
  _now=$(date +%Y%m%d-%H%M)
  _prefix="$boxbuilder_ami_prefix-ubuntu-$_release-$_codename-$_tag-$_arch-$_now"
  _description="Ubuntu $_release $_codename $_tag $_arch $_now"
  export EC2_CERT=$(echo $HOME/.ec2/cert-*.pem)
  export EC2_PRIVATE_KEY=$(echo $HOME/.ec2/pk-*.pem)
  # TODO: check for existence, print nice error if not set
  _volumeid=$(ec2-create-volume --size $_size --availability-zone us-east-1a | cut -f2)
  _instanceid=$(wget --progress=dot -qO- http://instance-data/latest/meta-data/instance-id)
  ec2-attach-volume --device /dev/sdi --instance "$_instanceid" "$_volumeid"
  while [ ! -e /dev/sdi ]; do echo -n .; sleep 1; done
  sudo mkfs.ext3 -F /dev/sdi
  _ebsimage=$_imagedir-ebs
  sudo mkdir $_ebsimage
  sudo mount /dev/sdi $_ebsimage
  sudo tar -cSf - -C $_imagedir . | sudo tar xvf - -C $_ebsimage
  sudo umount $_ebsimage
  ec2-detach-volume "$_volumeid"
  snapshotid=$(ec2-create-snapshot "$_volumeid" | cut -f2)
  ec2-delete-volume "$_volumeid"
  while ec2-describe-snapshots "$snapshotid" | grep -q pending
    do echo -n .; sleep 1; done
  _newami=$(ec2-register \
    --architecture $_arch \
    --name "$_prefix" \
    --description "$_description" \
    $_ebsopts \
    --snapshot "$snapshotid")
  echo "AMIBUILDER: NEW AMI REGISTERED: AMI ID=$_newami, EBS ID=$_volumeid, EBS SNAPSHOT ID=$snapshotid, PREFIX=$_prefix, DESCRIPTION=$_description"
  echo "BOXBUILDER - boxbuilder_build_ami: Finished copying image to AMI ..."
}

run() {
  echo "BOXBUILDER - boxbuilder_build_ami: Starting ..."
  setup
  install_ec2_tools
  create_chroot_jail_from_base_image
  run_boxbuilder_bootstrap_in_chroot_jail_to_build_image
  copy_image_to_ami
  echo "BOXBUILDER - boxbuilder_build_ami: Finished!"
}

run