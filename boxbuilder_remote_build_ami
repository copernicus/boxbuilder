#!/usr/bin/env bash

#  http://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false}

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set â€“o verbose
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

exec_remotely() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  echo "ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host \"$@\""
  ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host "$@"
}

exec_remotely_quiet() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  # echo "ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host \"$@\""
  ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host "$@"
}

exec_remotely_pseudo_tty() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  echo "ssh -t -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host \"$@\""
  ssh -t -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host "$@"
}

setup() {
  echo "$_log_prefix  Environment variable setup ..."

  if [ -e $HOME/.boxbuilderrc ]; then
    source $HOME/.boxbuilderrc
  fi
  boxbuilder_config=${boxbuilder_config:-'export boxbuilder_config_placeholder_from_boxbuilder_remote_build_ami=boxbuilder_config_placeholder_from_boxbuilder_remote_build_ami'}
  eval $boxbuilder_config
  boxbuilder_build_ami_url=${boxbuilder_build_ami_url:-"http://github.com/thewoolleyman/boxbuilder/raw/master/boxbuilder_build_ami"}
  boxbuilder_user=${boxbuilder_user:-"ubuntu"}
  boxbuilder_builder_instance_id=${boxbuilder_builder_instance_id:-""}
  boxbuilder_builder_instance_instance_type=${boxbuilder_builder_instance_instance_type:-"m1.large"}
  boxbuilder_builder_instance_ami_id=${boxbuilder_builder_instance_ami_id:-"ami-4b4ba522"}
  boxbuilder_ec2_api_tools_url=${boxbuilder_ec2_api_tools_url:-"http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip"}
  boxbuilder_terminate_ec2_resources=${boxbuilder_terminate_ec2_resources:-true}
  
  EC2_CERT=${EC2_CERT:-""}
  EC2_PRIVATE_KEY=${EC2_PRIVATE_KEY:-""}
  EC2_KEYPAIR=${EC2_KEYPAIR:-""}

  boxbuilder_skip_build=${boxbuilder_skip_build:-false} # Undocumented flag, for debugging boxbuilder_remote_build_ami

  # Internal constants
  _boxbuilder_ec2_resource_tag='boxbuilder_temp_resource_safe_to_terminate'

  # Initialize local variables which may be undefined if boxbuilder_skip_build=true
  _build_ami_output=''
  
  echo "$_log_prefix  Finished environment variable setup:"
  echo "boxbuilder_config=$boxbuilder_config"
  # TODO: Add all env vars which are directly used by this script
}

set_ec2_credentials() {
  echo "$_log_prefix Setting EC2 credentials ..."
  
  if [[ -z $EC2_CERT ]]; then
    EC2_CERT=( $HOME/.ec2/cert-*.pem ) # grab first file using bash array
    echo "$_log_prefix EC2_CERT is not set, loading from $HOME/.ec2/cert-*.pem ..."
  fi

  if [[ ! -e $EC2_CERT ]]; then
    echo "$_log_prefix ERROR: EC2_CERT was not found at $EC2_CERT, exiting ..."
    return 1
  fi

  if [[ -z $EC2_PRIVATE_KEY ]]; then
    EC2_PRIVATE_KEY=( $HOME/.ec2/pk-*.pem ) # grab first file using bash array
    echo "$_log_prefix EC2_PRIVATE_KEY is not set, loading from $HOME/.ec2/pk-*.pem ..."
  fi

  if [[ ! -e $EC2_PRIVATE_KEY ]]; then
    echo "$_log_prefix ERROR: EC2_PRIVATE_KEY was not found at $EC2_PRIVATE_KEY, exiting ..."
    return 1
  fi

  if [[ -z $EC2_KEYPAIR ]]; then
    EC2_KEYPAIR=( $HOME/.ec2/keypair-*.pem ) # grab first file using bash array
    echo "$_log_prefix EC2_KEYPAIR is not set, loading from $HOME/.ec2/keypair-*.pem ..."
  fi

  if [[ ! -e $EC2_KEYPAIR ]]; then
    echo "$_log_prefix ERROR: EC2_KEYPAIR was not found at $EC2_KEYPAIR, exiting ..."
    return 1
  fi

  EC2_KEYPAIR_NAME=${EC2_KEYPAIR_NAME:?"Please set 'EC2_KEYPAIR_NAME' to the name of your EC2 keypair which matches the EC2_KEYPAIR at $EC2_KEYPAIR"}

  export EC2_CERT
  export EC2_PRIVATE_KEY
  export EC2_KEYPAIR

  echo "$_log_prefix Finished setting EC2 credentials.  Using EC2_CERT=$EC2_CERT , EC2_PRIVATE_KEY=$EC2_PRIVATE_KEY , EC2_KEYPAIR=$EC2_KEYPAIR , and EC2_KEYPAIR_NAME=$EC2_KEYPAIR_NAME ..."
}

set_up_ec2_tools() {
  echo "$_log_prefix Setting up EC2 tools ..."
  
  _ec2_tools_path=$HOME/.boxbuilder_ec2_tools
  _ec2_api_tools_path=$_ec2_tools_path/ec2-api-tools
  if [[ -x $_ec2_api_tools_path/bin/ec2-run-instances ]]; then
    echo "$_log_prefix EC2 API Tools already exist at $_ec2_api_tools_path.  Not re-downloading ..."
  else
    mkdir -p $_ec2_tools_path
    if [[ ! $(which unzip) ]]; then
      echo "$_log_prefix ERROR: 'unzip' executable not available.  It is required to unzip auto-downloaded EC2 API Tools. Either put unzip with on your path, or manually unzip the EC2 API Tools to $_ec2_api_tools_path ..."
      return 1
    fi
    _ec2_api_tools_zipfile=$_ec2_tools_path/${boxbuilder_ec2_api_tools_url##*/} # grabs last path component of url to use as zipfile name
    echo "$_log_prefix EC2 API Tools do not exist at $_ec2_api_tools_path.  Downloading from $boxbuilder_ec2_api_tools_url to $_ec2_api_tools_path ..."
    wget -O $_ec2_api_tools_zipfile $boxbuilder_ec2_api_tools_url
    echo "$_log_prefix Reading top-level directory for $_ec2_api_tools_zipfile ..."
    # Zipfile is structured with top-level directory containing the release date, so we must determine what it is, extract, and symlink it to _ec2_api_tools_path
    disable_error_checking
    _first_zipfile_listing_entry=$(unzip -l $_ec2_api_tools_zipfile | head -n4 | tail -n1) # _first_zipfile_listing_entry should be top-level zipfile dir
    enable_error_checking
    _top_level_zipfile_dir=${_first_zipfile_listing_entry##* } # grab just last space-delimited directory component from _first_zipfile_listing_entry
    _top_level_zipfile_dir=${_top_level_zipfile_dir%%/} # strip trailing slash
    echo "$_log_prefix Unzipping $_ec2_api_tools_zipfile to $_ec2_tools_path ..."
    unzip -o -d $_ec2_tools_path $_ec2_api_tools_zipfile # Unzip to $HOME/.boxbuilder_ec2_tools
    echo "$_log_prefix Symlinking $_ec2_tools_path/$_top_level_zipfile_dir to $_ec2_api_tools_path ..."
    ln -sf $_ec2_tools_path/$_top_level_zipfile_dir $_ec2_api_tools_path # symlink to simple directory name without release date.
  fi
  export PATH=$_ec2_api_tools_path/bin:$PATH
  echo "$_log_prefix Finished setting up EC2 tools ..."
}

start_builder_instance() {
  echo "$_log_prefix Starting builder instance to perform AMI build: ami=$boxbuilder_builder_instance_ami_id, instance_type=$boxbuilder_builder_instance_instance_type ..."
  boxbuilder_builder_instance_id=$(ec2-run-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
    --key "$EC2_KEYPAIR_NAME" \
    --availability-zone us-east-1a \
    --instance-type "$boxbuilder_builder_instance_instance_type" \
    "$boxbuilder_builder_instance_ami_id" \
    -d "$_boxbuilder_ec2_resource_tag" \
    | egrep ^INSTANCE | cut -f2)
  echo "$_log_prefix Successfully started EC2 builder instance: instance_id=$boxbuilder_builder_instance_id"
}

get_builder_instance_host() {
  echo "$_log_prefix Finding hostname for $boxbuilder_builder_instance_id ..."
  while boxbuilder_builder_instance_host=$(ec2-describe-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
     "$boxbuilder_builder_instance_id" | \
    egrep ^INSTANCE | cut -f4) && [[ -z $boxbuilder_builder_instance_host ]]; do
      echo -n .
      sleep 3
  done
  echo
  echo "$_log_prefix Got hostname $boxbuilder_builder_instance_host for instance $boxbuilder_builder_instance_id"
  echo "$_log_prefix Waiting for ssh connectivity to $boxbuilder_builder_instance_host ..."
  while ssh_up=$(ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_builder_instance_host "echo 'ssh up'"); [[ "$ssh_up" != "ssh up" ]]; do
    echo "$_log_prefix SSH connect response from $boxbuilder_builder_instance_host: $ssh_up"
    echo "$_log_prefix Trying to SSH to $boxbuilder_builder_instance_host again after 3 seconds..."
    sleep 3
  done
  echo
}

upload_ec2_credentials() {
  echo "$_log_prefix Uploading EC2 credentials to $boxbuilder_builder_instance_host ..."
  exec_remotely 'mkdir -p $HOME/.ec2'
  echo "$_log_prefix Uploading EC2_CERT $EC2_CERT to $boxbuilder_user@$boxbuilder_builder_instance_host:.ec2/ ..."
  rsync \
    --rsh="ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR" \
    --rsync-path="rsync" \
    $EC2_CERT \
    $boxbuilder_user@$boxbuilder_builder_instance_host:.ec2/

  echo "$_log_prefix Uploading EC2_PRIVATE_KEY $EC2_PRIVATE_KEY to $boxbuilder_user@$boxbuilder_builder_instance_host:.ec2/ ..."
  rsync \
    --rsh="ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR" \
    --rsync-path="rsync" \
    $EC2_PRIVATE_KEY \
    $boxbuilder_user@$boxbuilder_builder_instance_host:.ec2/

  echo "$_log_prefix Finished uploading EC2 credentials to $boxbuilder_builder_instance_host ..."
}

remote_build_ami() {
  _boxbuilder_build_ami_script=/tmp/${boxbuilder_build_ami_url##*/} # grabs last path component of url to use as script name
  echo "$_log_prefix Downloading $boxbuilder_build_ami_url to $_boxbuilder_build_ami_script on $boxbuilder_builder_instance_host ..."
  exec_remotely "wget -O $_boxbuilder_build_ami_script $boxbuilder_build_ami_url"
  while exists=$(exec_remotely_quiet "if [[ -e $_boxbuilder_build_ami_script ]] ; then echo exists; fi"); [[ "$exists" != "exists" ]]; do
    echo "$_log_prefix Waiting for wget to finish downloading  $boxbuilder_build_ami_url to $_boxbuilder_build_ami_script on $boxbuilder_builder_instance_host ..."
    sleep 3
  done
  echo "$_log_prefix $boxbuilder_build_ami_url successfully downloaded to $_boxbuilder_build_ami_script on $boxbuilder_builder_instance_host ..."

  echo "$_log_prefix Changing permissions on $_boxbuilder_build_ami_script on $boxbuilder_builder_instance_host ..."
  exec_remotely "chmod a+x $_boxbuilder_build_ami_script"
  echo "$_log_prefix Running $_boxbuilder_build_ami_script on $boxbuilder_builder_instance_host ..."
  _build_ami_output=$(exec_remotely_pseudo_tty "export boxbuilder_config='$boxbuilder_config' \
    && export boxbuilder_debug=$boxbuilder_debug \
    && $_boxbuilder_build_ami_script")
  echo "$_build_ami_output"
}

boxbuilder_terminate_builder_instances() {
  if [[ $boxbuilder_debug = true ]]; then
    echo "$_log_prefix Terminating EC2 builder instances ..."
  fi
  _instances=$(ec2-describe-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT)
  disable_error_checking # we must disable error checking because grep will fail with nonzero if there are no running instances
  _instances=$(echo "$_instances" | egrep ^INSTANCE)
  enable_error_checking
  echo "$_instances" | while read line; do
    _instance_id=$(echo "$line" | cut -f2)
    if [[ $boxbuilder_debug = true ]]; then
      echo "$_log_prefix Checking instance id $_instance_id for User Data containing '$_boxbuilder_ec2_resource_tag'"
    fi

    # Do not terminate instances which boxbuilder did not start (which do not contain $_boxbuilder_ec2_resource_tag)
    _user_data=$(ec2-describe-instance-attribute --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
      $_instance_id --user-data \
      | cut -f3)
    if [[ $boxbuilder_debug = true ]]; then
      echo "$_log_prefix Instance id $_instance_id User Data: $_user_data"
    fi

    disable_error_checking
    if [[ -z $(echo "$_user_data" | grep $_boxbuilder_ec2_resource_tag) ]]; then
      if [[ $boxbuilder_debug = true ]]; then
        echo "$_log_prefix NOT terminating instance $_instance_id because it does not contain '$_boxbuilder_ec2_resource_tag' in the User Data"
      fi
      continue
    fi
    enable_error_checking

    disable_error_checking
    # Do not attempt to terminate instances which are already terminated
    if [[ -e $(echo "$_user_data" | egrep 'terminated$') ]]; then
      if [[ $boxbuilder_debug = true ]]; then
        echo "$_log_prefix NOT terminating instance $_instance_id because it is already terminated"
      fi
      continue
    fi
    enable_error_checking
    
    echo "$_log_prefix terminating boxbuilder builder instance $_instance_id ..."
    disable_error_checking
    _terminate_instances_result=$(ec2-terminate-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_instance_id")
    enable_error_checking
    echo "$_log_prefix ec2-terminate-instances result for instance $_instance_id: $_terminate_instances_result"
  done
  if [[ $boxbuilder_debug = true ]]; then
    echo "$_log_prefix Finished terminating EC2 builder instances ..."
  fi
}

boxbuilder_deregister_temp_amis() {
  if [[ $boxbuilder_debug = true ]]; then
    echo "$_log_prefix Deregistering temporary AMIs ..."
  fi
  _images="$(ec2-describe-images --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT)"
  disable_error_checking # we must disable error checking because grep will fail with nonzero if there are no temp AMIs
  _images="$(echo "$_images" | grep $_boxbuilder_ec2_resource_tag)"
  enable_error_checking
  echo "$_images" | while read line; do
    _image_id=$(echo "$line" | cut -f2)

    if [[ -n $_build_ami_output ]] ; then
      disable_error_checking
      _created_ami_id_line=$(echo "$_build_ami_output" | grep -e '^boxbuilder_created_ami_id')
      
      # Do not attempt to deregister temp AMI which was just built
      if [[ -n "$_build_ami_output" && -n $(echo "$_created_ami_id_line" | grep $_image_id) ]]; then
        if [[ $boxbuilder_debug = true ]]; then
          echo "$_log_prefix NOT deregistering $_image_id because it is was just created in this boxbuilder_remote_build_ami run"
        fi
        continue
      fi
      enable_error_checking
    fi

    echo "$_log_prefix deregistering boxbuilder temp AMI $_image_id ..."
    disable_error_checking
    _deregister_result=$(ec2-deregister --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_image_id")
    enable_error_checking
    echo "$_log_prefix ec2-deregister result for image $_image_id: $_deregister_result"
  done
  if [[ $boxbuilder_debug = true ]]; then
    echo "$_log_prefix Finished deregistering temporary AMIs ..."
  fi
}

boxbuilder_delete_ebs_snapshots() {
  if [[ $boxbuilder_debug = true ]]; then
    echo "$_log_prefix Deleting EBS snapshots ..."
  fi
  # Do not terminate snapshots which boxbuilder did not start (which do not contain $_boxbuilder_ec2_resource_tag)
  _snapshots=$(ec2-describe-snapshots --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT)
  disable_error_checking # we must disable error checking because grep will fail with nonzero if there are no snapshots
  _snapshots=$(echo "$_snapshots" | grep $_boxbuilder_ec2_resource_tag)
  enable_error_checking
  echo "$_snapshots" | while read line; do
    _snapshot_id=$(echo "$line" | cut -f2)
    if [[ $boxbuilder_debug = true ]]; then
      echo "$_log_prefix Checking if $_snapshot_id is currently in use by any AMIs ..."
    fi

    # Do not attempt to delete snapshots which are currently in use by an AMI, it isn't allowed
    disable_error_checking
    _image_using_snapshot=$(ec2-describe-images --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT | grep $_snapshot_id )
    enable_error_checking
    if [[ -n $_image_using_snapshot ]]; then
      if [[ $boxbuilder_debug = true ]]; then
        echo "$_log_prefix NOT deleting snapshot ID $_snapshot_id because it is in use by AMI ID $_image_using_snapshot"
      fi
      continue
    fi

    echo "$_log_prefix terminating boxbuilder AMI snapshot $_snapshot_id ..."
    disable_error_checking
    _terminate_snapshot_result=$(ec2-delete-snapshot --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT "$_snapshot_id")
    enable_error_checking
    echo "$_log_prefix ec2-delete-snapshot result for snapshot $_snapshot_id: $_terminate_snapshot_result"
  done
  if [[ $boxbuilder_debug = true ]]; then
    echo "$_log_prefix Finished deleting EBS snapshots ..."
  fi
}

boxbuilder_terminate_ec2_resources() {
  if [[ $boxbuilder_terminate_ec2_resources = true ]] ; then
    echo "$_log_prefix Terminating EC2 resources, because boxbuilder_terminate_ec2_resources was equal to true ..."
    boxbuilder_terminate_builder_instances
    boxbuilder_deregister_temp_amis
    boxbuilder_delete_ebs_snapshots
    echo "$_log_prefix Finished terminating EC2 resources ..."
  else
    echo "$_log_prefix boxbuilder_terminate_ec2_resources was not equal to true, so NO boxbuilder resources were terminated."
  fi
}

run() {
  echo "$_log_prefix Starting ..."
  setup
  set_ec2_credentials
  set_up_ec2_tools
  if [[ $boxbuilder_skip_build = false ]] ; then
    if [[ -z $boxbuilder_builder_instance_id ]] ; then
      start_builder_instance
    fi
    get_builder_instance_host
    upload_ec2_credentials
    remote_build_ami
  fi
  boxbuilder_terminate_ec2_resources
  echo "$_log_prefix Finished and exiting successfully"
}

run
onexit
