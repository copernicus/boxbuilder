#!/usr/bin/env bash

#  http://github.com/thewoolleyman/boxbuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

boxbuilder_debug=${boxbuilder_debug:-false} # Set this to true to debug failing tests

if [[ $boxbuilder_debug = true ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set â€“o verbose
  set -o xtrace
fi

set -o errexit
set -o errtrace
set -o noclobber
set -o nounset
set -o pipefail

_log_prefix="BOXBUILDER - $BASH_SOURCE:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ $exit_status != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  echo "$_log_prefix $_error_line Exiting $0 with $exit_status"
  exit $exit_status
}

trap onexit HUP INT QUIT TERM ERR

exec_remotely_quiet() {
  local arg_array i rc
  for arg; do
    arg_array[i++]=$(printf %q "$arg")
  done
  ssh -i $boxbuilder_keypair $boxbuilder_user@$boxbuilder_built_instance_host "$@"
}

setup() {
  export boxbuilder_debug
  source $(dirname $0)/test_helper

  # Set test vars
  source $HOME/.boxbuilder_testrc # don't use real .boxbuilderrc file, we don't want to pollute it with test vars
  boxbuilder_ec2_resource_tag='boxbuilder_temp_resource_safe_to_terminate'
  # TODO: grep boxbuilder_keypair value out of boxbuilder_remote_build_ami output
  boxbuilder_keypair=${boxbuilder_keypair:?Please set 'boxbuilder_keypair' to the path of your ssh private key file}
  boxbuilder_user=${boxbuilder_user:-'ubuntu'}
  boxbuilder_dir="$(dirname $0)/.."
  boxbuilder_config="export boxbuilder_ami_prefix=$boxbuilder_ec2_resource_tag"
  export boxbuilder_config

  set +o xtrace # even if boxbuilder_debug is on, always turn off tracing
                # while running build and grabbing output.
                # dumping entire build output makes test output huge and confusing

  # Invoke boxbuilder_remote_build_ami to exercise all boxbuilder scripts except boxbuilder_bootstrap
  boxbuilder_remote_build_ami_output=$($boxbuilder_dir/boxbuilder_remote_build_ami)

  # Start built AMI
  echo; echo; echo
  echo "-------- BEGIN OUTPUT OF boxbuilder_remote_build_ami --------"
  echo "$boxbuilder_remote_build_ami_output"
  echo "-------- END OUTPUT OF boxbuilder_remote_build_ami --------"
  echo; echo; echo

  ami_vars=$(echo "$boxbuilder_remote_build_ami_output" | grep -e '^boxbuilder_created_ami_')

  if [[ $boxbuilder_debug = true ]]; then
    # turn back on tracing if we are debugging
    set -o xtrace
  fi

  echo "$ami_vars"
  eval $ami_vars
  boxbuilder_created_ami_id_no_carriage_returns=$(tr -d '\r' < <(echo $boxbuilder_created_ami_id) )
  boxbuilder_created_ami_id="$boxbuilder_created_ami_id_no_carriage_returns"
  boxbuilder_built_instance_id=$(ec2-run-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
    --key "$EC2_KEYPAIR_NAME" \
    --availability-zone us-east-1a \
    --instance-type "m1.large" \
    "$boxbuilder_created_ami_id" \
    -d "$boxbuilder_ec2_resource_tag" \
    | egrep ^INSTANCE | cut -f2)
  while boxbuilder_built_instance_host=$(ec2-describe-instances --private-key $EC2_PRIVATE_KEY --cert $EC2_CERT \
     "$boxbuilder_built_instance_id" | \
    egrep ^INSTANCE | cut -f4) && [[ -z $boxbuilder_built_instance_host ]]; do
      echo -n .
      sleep 3
  done
  echo "$_log_prefix Got hostname $boxbuilder_built_instance_host for instance $boxbuilder_built_instance_id"
  echo "$_log_prefix Waiting for ssh connectivity to $boxbuilder_built_instance_host ..."
  while ssh_up=$(ssh -o 'StrictHostKeyChecking no' -i $EC2_KEYPAIR $boxbuilder_user@$boxbuilder_built_instance_host "echo 'ssh up'"); [[ "$ssh_up" != "ssh up" ]]; do
    echo "$_log_prefix SSH connect response from $boxbuilder_built_instance_host: $ssh_up"
    echo "$_log_prefix Trying to SSH to $boxbuilder_built_instance_host again after 3 seconds..."
    sleep 3
  done  
}

test_can_log_in_as_user() {
  remote_user=$(exec_remotely_quiet "whoami")
  assert_equal $boxbuilder_user $remote_user
}

test_can_install_rvm() {
  rvm_info=$(exec_remotely_quiet "rvm info | head -n 1")
  assert_match 'ruby' $rvm_info
}

test_can_set_up_and_run_chef() {
  example1_touchfile_contents=$(exec_remotely_quiet 'cat $HOME/.tmp_boxbuilder_example1_chef_cookbook.touchfile')
  assert_equal 'boxbuilder_example1_chef_config_value' $example1_touchfile_contents
  example2_touchfile_contents=$(exec_remotely_quiet 'cat $HOME/.tmp_boxbuilder_example2_chef_cookbook.touchfile')
  assert_match 'boxbuilder_example2_chef_config_value' $example2_touchfile_contents
}

# TODO: Test boxbuilder_bootstrap by running it on instance running built AMI, but only after all other AMI tests are complete
# test_can_download_boxbuilder_bootstrap() {
#   expected_path=$(exec_remotely_quiet "which /tmp/boxbuilder_bootstrap")
#   assert_equal '/tmp/boxbuilder_bootstrap' $expected_path
# }

suite() {
  echo "$_log_prefix Starting tests ..."
  setup
  test_can_log_in_as_user
  test_can_install_rvm
  test_can_set_up_and_run_chef
  # test_can_download_boxbuilder_bootstrap
  echo "$_log_prefix All tests passed successfully"
}

suite
onexit
